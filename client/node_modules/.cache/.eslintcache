[{"/Users/raghav.g/Documents/Development/Full-Stack-Dashboard/client/src/App.jsx":"1","/Users/raghav.g/Documents/Development/Full-Stack-Dashboard/client/src/Components/TransactionHist.jsx":"2","/Users/raghav.g/Documents/Development/Full-Stack-Dashboard/client/src/Components/Login.jsx":"3","/Users/raghav.g/Documents/Development/Full-Stack-Dashboard/client/src/Components/Register.jsx":"4","/Users/raghav.g/Documents/Development/Full-Stack-Dashboard/client/src/Components/Trade.jsx":"5","/Users/raghav.g/Documents/Development/Full-Stack-Dashboard/client/src/Components/DataFetch.jsx":"6"},{"size":979,"mtime":1656877931872,"results":"7","hashOfConfig":"8"},{"size":1775,"mtime":1656914241487,"results":"9","hashOfConfig":"8"},{"size":2033,"mtime":1656911355963,"results":"10","hashOfConfig":"8"},{"size":2056,"mtime":1656845046602,"results":"11","hashOfConfig":"8"},{"size":4088,"mtime":1656876964361,"results":"12","hashOfConfig":"8"},{"size":3630,"mtime":1656914294757,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"uu3dz",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/raghav.g/Documents/Development/Full-Stack-Dashboard/client/src/App.jsx",["35"],[],"/Users/raghav.g/Documents/Development/Full-Stack-Dashboard/client/src/Components/TransactionHist.jsx",[],[],"/Users/raghav.g/Documents/Development/Full-Stack-Dashboard/client/src/Components/Login.jsx",["36","37"],[],"/Users/raghav.g/Documents/Development/Full-Stack-Dashboard/client/src/Components/Register.jsx",["38","39"],[],"import React from \"react\";\nimport { useState } from \"react\";\nimport { Navigate, useNavigate, Outlet } from \"react-router-dom\";\n\nexport default function Register() {\n  const navigate = useNavigate();\n  const [user, setUser] = React.useState({\n    username: \"\",\n    password: \"\",\n    repassword: \"\",\n  });\n\n  function handleChange(e) {\n    setUser((prevState) => {\n      return {\n        ...prevState,\n        [e.target.name]: e.target.value,\n      };\n    });\n  }\n\n  const [PostRes, setPostRes] = useState(\"\");\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    // fetch(\"http://localhost:3002/users\")\n    //   .then((res) => res.json())\n    //   .then((res) => {\n    //     console.log(res);\n    //   });\n\n    fetch(\"http://localhost:3001/register\", {\n      method: \"POST\",\n      body: JSON.stringify(user),\n      headers: { \"Content-Type\": \"application/json\" },\n    }).then((res) => {\n      if (res.status === 200) {\n        setPostRes(\"Registered Succesfully\");\n      } else if (res.status === 400) {\n        setPostRes(\"Username Already Exists!\");\n      } else {\n        setPostRes(\"Password and Confirm Password do not match\");\n      }\n    });\n  }\n  return (\n    <>\n      <form onSubmit={handleSubmit} action=\"\">\n        <input\n          name=\"username\"\n          onChange={handleChange}\n          type=\"text\"\n          placeholder=\"Username\"\n          value={user.username}\n          autoComplete=\"off\"\n        />\n        <input\n          name=\"password\"\n          onChange={handleChange}\n          type=\"password\"\n          placeholder=\"Password\"\n          value={user.password}\n        />\n        <input\n          name=\"repassword\"\n          onChange={handleChange}\n          type=\"password\"\n          placeholder=\"Confirm Password\"\n          value={user.repassword}\n        />\n        <br></br>\n        <button type=\"submit\" className=\"btn btn-warning\">REGISTER</button>\n      </form>\n      <div>{PostRes}</div>\n      <br></br>\n      <button  class=\"btn btn-outline-warning btn-lg\" onClick={() => navigate(\"/\")}>LOGIN</button>\n    </>\n  );\n}\n",[],"/Users/raghav.g/Documents/Development/Full-Stack-Dashboard/client/src/Components/Trade.jsx",["40","41","42","43","44","45"],[],"import * as React from 'react';\nimport Box from '@mui/material/Box';\nimport axios from 'axios';\nimport Card from '@mui/material/Card';\nimport CardActions from '@mui/material/CardActions';\nimport CardContent from '@mui/material/CardContent';\nimport Button from '@mui/material/Button';\nimport Typography from '@mui/material/Typography';\n\n\n\nexport default function BasicCard(props) {\n\n\n    const [val,setVal]=React.useState(0);\n    const [total,setTotal]=React.useState(0);\n\n    const [price,setPrice]=React.useState(props.price)\n\n    const [pairprice,setpairprice]=React.useState(0);\n\n      // console.log(props.price);\n    React.useEffect(()=>{\n      setPrice(props.price);\n    })\n\n    React.useEffect(() => {\n      axios.get(`/${props.coin}`)\n        .then((res) => {\n          setpairprice(res.data.filter(price=>price.exc===props.exchange))\n          console.log(\" trade data\");\n          console.log(res);\n          console.log(props.exchange);\n          console.log(res.data.filter(price=>price.exc===props.exchange));\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    },[]);\n\n   function submit(event){\n      //  event.preventDefault();\n        var date =new Date()\n\n\n      date = date.getUTCFullYear() +\n      ('00' + (date.getUTCMonth()+1)).slice(-2) +\n      ('00' + date.getUTCDate()).slice(-2) + \n      ('00' + date.getUTCHours()).slice(-2)+ \n      ('00' + date.getUTCMinutes()).slice(-2) + \n      ('00' + date.getUTCSeconds()).slice(-2);\n\n        // var obj={\n        //   id:date,\n        //   currency:props.coin,\n        //   exchange_name:props.exchange,\n        //   price:price,\n        //   quantity:parseInt(val),\n        //   execution:\"sucess\"\n        // }\n\n        // console.log(obj);\n\n      if(parseInt(val)>0){\n       axios.post(\"http://localhost:3001/trades\",\n       {\n         id:date,\n         quantity:parseInt(val),\n         currency:props.coin.toUpperCase(),\n         exchange_name:props.exchange,\n         price:pairprice[0].price,\n         total:parseInt(val)*pairprice[0].price,\n         execution:\"sucess\",\n         action:props.action\n      })\n      .then(res=>{\n        console.log(res.data)\n      })\n    }\n    else{\n      alert(\"quantity should be greater than 0\")\n    }\n  }\n\n      // format for storing date if needed \n     //  date = date.getUTCFullYear() + '-' +\n      //  ('00' + (date.getUTCMonth()+1)).slice(-2) + '-' +\n      //  ('00' + date.getUTCDate()).slice(-2) + ' ' + \n      //  ('00' + date.getUTCHours()).slice(-2) + ':' + \n      //  ('00' + date.getUTCMinutes()).slice(-2) + ':' + \n      //  ('00' + date.getUTCSeconds()).slice(-2);\n\n  return (\n    <form onSubmit={(event)=>submit(event)}>\n    <Card sx={{ minWidth: 275 }} style={{textAlign:\"center\"}}>\n      <CardContent>\n        <Typography sx={{ fontSize: 14 }} color=\"text.secondary\" gutterBottom>\n          Summary of Order\n        </Typography>\n        <Typography variant=\"h5\" component=\"div\">\n          Qty to {props.action}\n        </Typography>\n        <input type=\"number\" style={{borderRadius:\"5%\",textAlign:\"centre\"}} placeholder=\"Qty\" value={val} onChange={(event)=>{\n          // console.log(event.target.value)\n          setVal(event.target.value)\n        }} ></input>\n        <Typography sx={{ mb: 1.5 }} color=\"text.secondary\">\n          {/* adjective */}\n        </Typography>\n\n        {val>0?\n        <Typography variant=\"body2\">\n          you are about to {props.action} {val} {props.coin.toUpperCase()} from {props.exchange.toUpperCase()} at a price of {pairprice[0].price} per coin \n          <br></br>\n        </Typography>\n        :null\n        }\n        {console.log(pairprice[0])}\n        <Typography>Total amount to be paid = {price*val} </Typography>\n        \n        <br></br>\n        \n      </CardContent>\n      <CardActions style={{marginLeft:\"auto\"}}>\n        {/* <Button size=\"small\" >Confirm Order</Button> */}\n        <button type=\"button submit\" className=\"btn btn-outline-warning btn-lg\" style={{width:\"500px\"}} >Confirm Order</button>\n      </CardActions>\n    </Card>\n    </form>\n  );\n}\n\n// export default BasicCard","/Users/raghav.g/Documents/Development/Full-Stack-Dashboard/client/src/Components/DataFetch.jsx",["46","47","48"],[],{"ruleId":"49","severity":1,"message":"50","line":4,"column":8,"nodeType":"51","messageId":"52","endLine":4,"endColumn":14},{"ruleId":"49","severity":1,"message":"53","line":2,"column":10,"nodeType":"51","messageId":"52","endLine":2,"endColumn":18},{"ruleId":"49","severity":1,"message":"54","line":2,"column":33,"nodeType":"51","messageId":"52","endLine":2,"endColumn":39},{"ruleId":"49","severity":1,"message":"53","line":3,"column":10,"nodeType":"51","messageId":"52","endLine":3,"endColumn":18},{"ruleId":"49","severity":1,"message":"54","line":3,"column":33,"nodeType":"51","messageId":"52","endLine":3,"endColumn":39},{"ruleId":"49","severity":1,"message":"55","line":2,"column":8,"nodeType":"51","messageId":"52","endLine":2,"endColumn":11},{"ruleId":"49","severity":1,"message":"56","line":7,"column":8,"nodeType":"51","messageId":"52","endLine":7,"endColumn":14},{"ruleId":"49","severity":1,"message":"57","line":16,"column":12,"nodeType":"51","messageId":"52","endLine":16,"endColumn":17},{"ruleId":"49","severity":1,"message":"58","line":16,"column":18,"nodeType":"51","messageId":"52","endLine":16,"endColumn":26},{"ruleId":"59","severity":1,"message":"60","line":23,"column":5,"nodeType":"61","endLine":23,"endColumn":20,"suggestions":"62"},{"ruleId":"59","severity":1,"message":"63","line":39,"column":7,"nodeType":"64","endLine":39,"endColumn":9,"suggestions":"65"},{"ruleId":"49","severity":1,"message":"66","line":14,"column":12,"nodeType":"51","messageId":"52","endLine":14,"endColumn":14},{"ruleId":"49","severity":1,"message":"67","line":14,"column":16,"nodeType":"51","messageId":"52","endLine":14,"endColumn":21},{"ruleId":"49","severity":1,"message":"68","line":106,"column":10,"nodeType":"51","messageId":"52","endLine":106,"endColumn":16},"no-unused-vars","'Footer' is defined but never used.","Identifier","unusedVar","'Navigate' is defined but never used.","'Outlet' is defined but never used.","'Box' is defined but never used.","'Button' is defined but never used.","'total' is assigned a value but never used.","'setTotal' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setPrice'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props.price] as a second argument to the useEffect Hook.","MemberExpression",["69"],"React Hook React.useEffect has missing dependencies: 'props.coin' and 'props.exchange'. Either include them or remove the dependency array. If 'setpairprice' needs the current value of 'props.exchange', you can also switch to useReducer instead of useState and read 'props.exchange' in the reducer.","ArrayExpression",["70"],"'tb' is assigned a value but never used.","'setTb' is assigned a value but never used.","'reload' is defined but never used.",{"desc":"71","fix":"72"},{"desc":"73","fix":"74"},"Add dependencies array: [props.price]",{"range":"75","text":"76"},"Update the dependencies array to be: [props.coin, props.exchange]",{"range":"77","text":"78"},[678,678],", [props.price]",[1106,1108],"[props.coin, props.exchange]"]